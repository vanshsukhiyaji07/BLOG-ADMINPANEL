<%- include('modern-header') %>

<div class="page-header">
  <h1 class="page-title">Change Password</h1>
  <p class="page-subtitle">Update your account password for enhanced security</p>
  <div class="page-actions">
    <a href="/admin/dashboard" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i>
      Back to Dashboard
    </a>
  </div>
</div>

<div class="row justify-content-center">
  <div class="col-lg-6">
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Password Change</h3>
        <p class="card-subtitle">Enter your current password and choose a new secure password</p>
      </div>
      <div class="card-body">
        <form action="/admin/change-password" method="POST" id="change-password-form">
          <div class="form-group">
            <label for="currentPassword" class="form-label">Current Password *</label>
            <div class="password-input">
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
              <button type="button" class="password-toggle" id="current-password-toggle">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="form-feedback"></div>
          </div>
          
          <div class="form-group">
            <label for="newPassword" class="form-label">New Password *</label>
            <div class="password-input">
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <button type="button" class="password-toggle" id="new-password-toggle">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="password-strength" id="password-strength">
              <div class="strength-bar">
                <div class="strength-fill" id="strength-fill"></div>
              </div>
              <div class="strength-text" id="strength-text">Enter a password</div>
            </div>
            <div class="form-feedback"></div>
          </div>
          
          <div class="form-group">
            <label for="confirmPassword" class="form-label">Confirm New Password *</label>
            <div class="password-input">
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
              <button type="button" class="password-toggle" id="confirm-password-toggle">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="form-feedback"></div>
          </div>
          
          <div class="password-requirements">
            <h4>Password Requirements</h4>
            <div class="requirement-list">
              <div class="requirement-item" id="req-length">
                <i class="fas fa-circle"></i>
                <span>At least 8 characters</span>
              </div>
              <div class="requirement-item" id="req-uppercase">
                <i class="fas fa-circle"></i>
                <span>One uppercase letter</span>
              </div>
              <div class="requirement-item" id="req-lowercase">
                <i class="fas fa-circle"></i>
                <span>One lowercase letter</span>
              </div>
              <div class="requirement-item" id="req-number">
                <i class="fas fa-circle"></i>
                <span>One number</span>
              </div>
              <div class="requirement-item" id="req-special">
                <i class="fas fa-circle"></i>
                <span>One special character</span>
              </div>
            </div>
          </div>
          
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-key"></i>
              Change Password
            </button>
            <button type="reset" class="btn btn-outline-secondary">
              <i class="fas fa-undo"></i>
              Reset Form
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <div class="col-lg-4">
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Security Tips</h3>
      </div>
      <div class="card-body">
        <div class="security-tips">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-shield-alt"></i>
            </div>
            <div class="tip-content">
              <h4>Strong Passwords</h4>
              <p>Use a combination of letters, numbers, and special characters to create a strong password.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-user-secret"></i>
            </div>
            <div class="tip-content">
              <h4>Unique Passwords</h4>
              <p>Never reuse passwords across different accounts or services.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-sync-alt"></i>
            </div>
            <div class="tip-content">
              <h4>Regular Updates</h4>
              <p>Change your password regularly, especially after security incidents.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-lock"></i>
            </div>
            <div class="tip-content">
              <h4>Secure Storage</h4>
              <p>Use a password manager to securely store and generate strong passwords.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--text-primary);
}

.form-control {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid var(--border-primary);
  border-radius: 8px;
  background: var(--bg-secondary);
  color: var(--text-primary);
  transition: all var(--transition-normal);
}

.form-control:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.form-control.error {
  border-color: var(--danger);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.form-control.success {
  border-color: var(--success);
  box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
}

.form-feedback {
  margin-top: 0.25rem;
  font-size: 0.875rem;
  min-height: 1.25rem;
}

.form-feedback.error {
  color: var(--danger);
}

.form-feedback.success {
  color: var(--success);
}

.password-input {
  position: relative;
}

.password-toggle {
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: color var(--transition-normal);
}

.password-toggle:hover {
  color: var(--text-primary);
}

.password-strength {
  margin-top: 0.75rem;
}

.strength-bar {
  width: 100%;
  height: 4px;
  background: var(--border-primary);
  border-radius: 2px;
  overflow: hidden;
  margin-bottom: 0.5rem;
}

.strength-fill {
  height: 100%;
  width: 0%;
  transition: all var(--transition-normal);
  border-radius: 2px;
}

.strength-fill.weak {
  width: 25%;
  background: var(--danger);
}

.strength-fill.fair {
  width: 50%;
  background: var(--warning);
}

.strength-fill.good {
  width: 75%;
  background: var(--info);
}

.strength-fill.strong {
  width: 100%;
  background: var(--success);
}

.strength-text {
  font-size: 0.75rem;
  color: var(--text-secondary);
  text-align: center;
}

.password-requirements {
  margin: 1.5rem 0;
  padding: 1.5rem;
  background: var(--bg-tertiary);
  border-radius: 8px;
  border: 1px solid var(--border-primary);
}

.password-requirements h4 {
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 1rem;
}

.requirement-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.requirement-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.75rem;
  color: var(--text-secondary);
  transition: color var(--transition-normal);
}

.requirement-item i {
  font-size: 0.5rem;
  transition: color var(--transition-normal);
}

.requirement-item.met {
  color: var(--success);
}

.requirement-item.met i {
  color: var(--success);
}

.form-actions {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border-primary);
}

.security-tips {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.tip-item {
  display: flex;
  gap: 1rem;
  align-items: flex-start;
}

.tip-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(99, 102, 241, 0.1);
  color: var(--primary);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.tip-content h4 {
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 0.25rem;
}

.tip-content p {
  font-size: 0.75rem;
  color: var(--text-secondary);
  line-height: 1.4;
  margin: 0;
}

.card-subtitle {
  color: var(--text-secondary);
  font-size: 0.875rem;
  margin: 0;
}

@media (max-width: 768px) {
  .form-actions {
    flex-direction: column;
  }
  
  .tip-item {
    flex-direction: column;
    text-align: center;
  }
  
  .tip-icon {
    align-self: center;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('change-password-form');
  const currentPasswordToggle = document.getElementById('current-password-toggle');
  const newPasswordToggle = document.getElementById('new-password-toggle');
  const confirmPasswordToggle = document.getElementById('confirm-password-toggle');
  const currentPasswordInput = document.getElementById('currentPassword');
  const newPasswordInput = document.getElementById('newPassword');
  const confirmPasswordInput = document.getElementById('confirmPassword');
  const strengthFill = document.getElementById('strength-fill');
  const strengthText = document.getElementById('strength-text');
  
  // Password toggle functionality
  currentPasswordToggle.addEventListener('click', () => {
    const type = currentPasswordInput.type === 'password' ? 'text' : 'password';
    currentPasswordInput.type = type;
    currentPasswordToggle.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
  });
  
  newPasswordToggle.addEventListener('click', () => {
    const type = newPasswordInput.type === 'password' ? 'text' : 'password';
    newPasswordInput.type = type;
    newPasswordToggle.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
  });
  
  confirmPasswordToggle.addEventListener('click', () => {
    const type = confirmPasswordInput.type === 'password' ? 'text' : 'password';
    confirmPasswordInput.type = type;
    confirmPasswordToggle.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
  });
  
  // Password strength checker
  newPasswordInput.addEventListener('input', () => {
    checkPasswordStrength(newPasswordInput.value);
    checkPasswordRequirements(newPasswordInput.value);
  });
  
  function checkPasswordStrength(password) {
    let strength = 0;
    let text = '';
    let className = '';
    
    if (password.length >= 8) strength += 25;
    if (/[A-Z]/.test(password)) strength += 25;
    if (/[a-z]/.test(password)) strength += 25;
    if (/[0-9]/.test(password)) strength += 25;
    
    if (strength <= 25) {
      text = 'Weak';
      className = 'weak';
    } else if (strength <= 50) {
      text = 'Fair';
      className = 'fair';
    } else if (strength <= 75) {
      text = 'Good';
      className = 'good';
    } else {
      text = 'Strong';
      className = 'strong';
    }
    
    strengthFill.style.width = strength + '%';
    strengthFill.className = 'strength-fill ' + className;
    strengthText.textContent = text;
  }
  
  function checkPasswordRequirements(password) {
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /[0-9]/.test(password),
      special: /[^A-Za-z0-9]/.test(password)
    };
    
    Object.keys(requirements).forEach(req => {
      const element = document.getElementById('req-' + req);
      if (requirements[req]) {
        element.classList.add('met');
      } else {
        element.classList.remove('met');
      }
    });
  }
  
  // Form validation
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    
    // Clear previous feedback
    clearFormFeedback();
    
    let isValid = true;
    
    // Validate required fields
    const requiredFields = ['currentPassword', 'newPassword', 'confirmPassword'];
    requiredFields.forEach(field => {
      const input = document.getElementById(field);
      if (!input.value.trim()) {
        showFieldError(input, 'This field is required');
        isValid = false;
      }
    });
    
    // Validate password match
    if (newPasswordInput.value !== confirmPasswordInput.value) {
      showFieldError(confirmPasswordInput, 'Passwords do not match');
      isValid = false;
    }
    
    // Validate password strength
    if (newPasswordInput.value && newPasswordInput.value.length < 8) {
      showFieldError(newPasswordInput, 'Password must be at least 8 characters long');
      isValid = false;
    }
    
    // Validate current password is different from new password
    if (currentPasswordInput.value === newPasswordInput.value) {
      showFieldError(newPasswordInput, 'New password must be different from current password');
      isValid = false;
    }
    
    if (isValid) {
      // Show loading state
      const submitBtn = form.querySelector('button[type="submit"]');
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Changing Password...';
      submitBtn.disabled = true;
      
      // Submit form
      form.submit();
    }
  });
  
  // Real-time validation
  const inputs = form.querySelectorAll('input');
  inputs.forEach(input => {
    input.addEventListener('blur', () => {
      validateField(input);
    });
    
    input.addEventListener('input', () => {
      clearFieldFeedback(input);
    });
  });
  
  function validateField(input) {
    const value = input.value.trim();
    
    if (input.hasAttribute('required') && !value) {
      showFieldError(input, 'This field is required');
      return false;
    }
    
    if (input.id === 'newPassword' && value && value.length < 8) {
      showFieldError(input, 'Password must be at least 8 characters long');
      return false;
    }
    
    if (input.id === 'confirmPassword' && value && newPasswordInput.value !== value) {
      showFieldError(input, 'Passwords do not match');
      return false;
    }
    
    if (input.id === 'newPassword' && value && currentPasswordInput.value === value) {
      showFieldError(input, 'New password must be different from current password');
      return false;
    }
    
    showFieldSuccess(input);
    return true;
  }
  
  function showFieldError(input, message) {
    input.classList.add('error');
    const feedback = input.parentNode.querySelector('.form-feedback');
    feedback.textContent = message;
    feedback.className = 'form-feedback error';
  }
  
  function showFieldSuccess(input) {
    input.classList.remove('error');
    input.classList.add('success');
    const feedback = input.parentNode.querySelector('.form-feedback');
    feedback.textContent = '✓ Valid';
    feedback.className = 'form-feedback success';
  }
  
  function clearFieldFeedback(input) {
    input.classList.remove('error', 'success');
    const feedback = input.parentNode.querySelector('.form-feedback');
    feedback.textContent = '';
    feedback.className = 'form-feedback';
  }
  
  function clearFormFeedback() {
    inputs.forEach(input => {
      input.classList.remove('error', 'success');
      const feedback = input.parentNode.querySelector('.form-feedback');
      feedback.textContent = '';
      feedback.className = 'form-feedback';
    });
  }
  
  // Add ripple effect to buttons
  document.querySelectorAll('.btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const ripple = document.createElement('span');
      ripple.className = 'ripple';
      btn.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });
});
</script>

<%- include('modern-footer') %> 