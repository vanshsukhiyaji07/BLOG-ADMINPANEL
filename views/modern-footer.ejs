      </div>
    </main>
  </div>

  <!-- Notification Container -->
  <div id="notification-container"></div>

  <!-- Modern Admin JavaScript -->
  <script>
    // DOM Elements
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const mainContent = document.getElementById('main-content');
    const currentPage = document.getElementById('current-page');
    const navLinks = document.querySelectorAll('.nav-link');
    const userMenu = document.getElementById('user-menu');

    // Sidebar Toggle
    sidebarToggle.addEventListener('click', () => {
      sidebar.classList.toggle('collapsed');
      mainContent.classList.toggle('expanded');
    });

    // Mobile Sidebar
    if (window.innerWidth <= 1024) {
      sidebar.classList.add('collapsed');
      mainContent.classList.add('expanded');
    }

    // Active Navigation
    function setActiveNav() {
      const currentPath = window.location.pathname;
      navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === currentPath) {
          link.classList.add('active');
          const pageName = link.querySelector('span').textContent;
          currentPage.textContent = pageName;
        }
      });
    }

    // Set active navigation on page load
    setActiveNav();

    // Notification System
    function showNotification(message, type = 'success', duration = 3000) {
      const container = document.getElementById('notification-container');
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      container.appendChild(notification);
      
      // Trigger animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 100);
      
      // Remove notification
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          container.removeChild(notification);
        }, 300);
      }, duration);
    }

    // User Menu Dropdown
    userMenu.addEventListener('click', () => {
      // Add dropdown functionality here if needed
      console.log('User menu clicked');
    });

    // Add loading states to buttons
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('btn')) {
        e.target.classList.add('loading');
        setTimeout(() => {
          e.target.classList.remove('loading');
        }, 1000);
      }
    });

    // Add hover effects to cards
    document.addEventListener('DOMContentLoaded', () => {
      const cards = document.querySelectorAll('.card, .stat-card');
      cards.forEach(card => {
        card.classList.add('fade-in-up');
      });
    });

    // Table row interactions
    document.addEventListener('DOMContentLoaded', () => {
      const tableRows = document.querySelectorAll('.table tbody tr');
      tableRows.forEach(row => {
        row.addEventListener('click', () => {
          // Add row selection functionality
          tableRows.forEach(r => r.classList.remove('selected'));
          row.classList.add('selected');
        });
      });
    });

    // Form validation and enhancement
    document.addEventListener('DOMContentLoaded', () => {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        form.addEventListener('submit', (e) => {
          const submitBtn = form.querySelector('button[type="submit"]');
          if (submitBtn) {
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
          }
        });
      });
    });

    // Auto-hide notifications on page change
    window.addEventListener('beforeunload', () => {
      const notifications = document.querySelectorAll('.notification');
      notifications.forEach(notification => {
        notification.classList.remove('show');
      });
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Ctrl/Cmd + K to toggle sidebar
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        sidebarToggle.click();
      }
      
      // Escape to close modals
      if (e.key === 'Escape') {
        const modals = document.querySelectorAll('.modal-overlay.show');
        modals.forEach(modal => {
          modal.classList.remove('show');
        });
      }
    });

    // Responsive sidebar behavior
    window.addEventListener('resize', () => {
      if (window.innerWidth <= 1024) {
        sidebar.classList.add('collapsed');
        mainContent.classList.add('expanded');
      }
    });

    // Add smooth scrolling
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Initialize tooltips
    document.addEventListener('DOMContentLoaded', () => {
      const tooltips = document.querySelectorAll('[data-tooltip]');
      tooltips.forEach(element => {
        element.addEventListener('mouseenter', (e) => {
          const tooltip = document.createElement('div');
          tooltip.className = 'tooltip';
          tooltip.textContent = e.target.getAttribute('data-tooltip');
          document.body.appendChild(tooltip);
          
          const rect = e.target.getBoundingClientRect();
          tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
          tooltip.style.top = rect.top - tooltip.offsetHeight - 8 + 'px';
        });
        
        element.addEventListener('mouseleave', () => {
          const tooltip = document.querySelector('.tooltip');
          if (tooltip) {
            tooltip.remove();
          }
        });
      });
    });

    // Flash message handling
    <% if (typeof messages !== 'undefined' && messages.success) { %>
      showNotification('<%= messages.success %>', 'success');
    <% } %>
    
    <% if (typeof messages !== 'undefined' && messages.error) { %>
      showNotification('<%= messages.error %>', 'error');
    <% } %>
  </script>

  <!-- Additional CSS for tooltips -->
  <style>
    .tooltip {
      position: fixed;
      background: var(--bg-tertiary);
      color: var(--text-primary);
      padding: 0.5rem 0.75rem;
      border-radius: 8px;
      font-size: 0.75rem;
      font-weight: 500;
      z-index: 10000;
      pointer-events: none;
      border: 1px solid var(--border-primary);
      box-shadow: var(--shadow-lg);
    }
    
    .table tbody tr.selected {
      background: rgba(99, 102, 241, 0.1) !important;
      border-left: 3px solid var(--primary);
    }
    
    .table tbody tr.selected td {
      color: var(--text-primary) !important;
    }
  </style>
</body>
</html> 